// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------------

import { BaseNumbers } from "./baseNumbers";
export namespace ArabicNumeric {
    export const LangMarker = 'Ar';
    export const CompoundNumberLanguage = false;
    export const MultiDecimalSeparatorCulture = true;
    export const RoundNumberIntegerRegex = `(?:مائة|مئة|ألف|مليون|مليار|مليارد|بليون|تريليون)`;
    export const ZeroToNineIntegerRegex = `(?:ثلاثة|سبعة|ثمانية|أربعة|خمسة|صفر|تسعة|واحد|اثنان|ستة)`;
    export const TwoToNineIntegerRegex = `(?:ثلاثة|سبعة|ثمانية|أربعة|خمسة|تسعة|اثنان|ستة)`;
    export const NegativeNumberTermsRegex = `(?<negTerm>(ناقص|سلبي)\\s+)`;
    export const NegativeNumberSignRegex = `^${NegativeNumberTermsRegex}.*`;
    export const AnIntRegex = `(an?)(?=\\s)`;
    export const TenToNineteenIntegerRegex = `(?:سبعة عشر|ثلاثة عشر|أربعة عشر|ثمانية عشر|تسعة عشر|خمسة عشر|ستة عشر|أحد عشر|اثنا عشر|عشرة)`;
    export const TensNumberIntegerRegex = `(?:سبعون|عشرون|ثلاثون|ثمانون|تسعون|أربعون|خمسون|ستون)`;
    export const SeparaIntRegex = `(?:((${TenToNineteenIntegerRegex}|(${ZeroToNineIntegerRegex}(\\s+(و\\s+)?|\\s*-\\s*)${TensNumberIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex})(\\s+${RoundNumberIntegerRegex})*))|((${AnIntRegex}(\\s+${RoundNumberIntegerRegex})+))`;
    export const AllIntRegex = `(?:(((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(و\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(و\\s+)?)*${SeparaIntRegex})`;
    export const PlaceHolderPureNumber = `\\b`;
    export const PlaceHolderDefault = `\\D|\\b`;
    export const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!([\\.,]\\d+[\\u0621-\\u064A]))(?=${placeholder})`; }
    export const NumbersWithSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*${BaseNumbers.NumberMultiplierRegex}(?=\\b)`;
    export const RoundNumberIntegerRegexWithLocks = `(?<=\\b)\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
    export const NumbersWithDozenSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+دزينة(s)?(?=\\b)`;
    export const AllIntRegexWithLocks = `((?<=\\b)${AllIntRegex}(?=\\b))`;
    export const AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((نصف\\s+)?a\\s+دزينة)|(${AllIntRegex}\\s+دزينة(s)?))(?=\\b)`;
    export const RoundNumberOrdinalRegex = `(?:المئة|المائة|الألف|المليون|المليار|التريليون)`;
    export const MascNumberOrdinalRegex = `(?:الأول|الثاني|الثالث|الرابع|الخامس|السادس|السابع|الثامن|التاسع|العاشر|الحادي عشر|الثاني عضر|الثالث عشر|الرابع عشر|الخامس عشر|السادس عشر|السابع عشر|الثامن عشر|التاسع عشر|العشرون|الثلاثون|الأربعون|الخمسون|الستون|السبعون|الثمانون|التسعون)`;
    export const FemNumberOrdinalRegex = `(?:الأولى|الثانية|الثالثة|الرابعة|الخامسة|السادسة|السابعة|الثامنة|التاسعة|العاشرة|الحادية عشر|الثانية عشر|الثالثة عشر|الرابعة عشر|الخامسة عشر|السادسة عشر|السابعة عشر|الثامنة عشر|التاسعة عشر|العشرون|الثلاثون|الأربعون|الخمسون|الستون|السبعون|الثمانون|التسعون)`;
    export const BasicOrdinalRegex = `($${MascNumberOrdinalRegex} | $${MascNumberOrdinalRegex})`;
    export const SuffixBasicOrdinalRegex = `(?:((((${TensNumberIntegerRegex}(\\s+(و\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(و\\s+)?)*(${TensNumberIntegerRegex}(\\s+|\\s*-\\s*))?${BasicOrdinalRegex})`;
    export const SuffixRoundNumberOrdinalRegex = `(?:(${AllIntRegex}\\s+)${RoundNumberOrdinalRegex})`;
    export const AllOrdinalRegex = `(?:${SuffixBasicOrdinalRegex}|${SuffixRoundNumberOrdinalRegex})`;
    export const OrdinalSuffixRegex = `(?<=\\b)(?:(\\d*(1st|2nd|3rd|[4-90]th))|(1[1-2]th))(?=\\b)`;
    export const OrdinalNumericRegex = `((رتبة|الرتبة)${AllIntRegex})`;
    export const OrdinalRoundNumberRegex = `(?<!an?\\s+)${RoundNumberOrdinalRegex}`;
    export const OrdinalArabicRegex = `(?<=\\b)${AllOrdinalRegex}(?=\\b)`;
    export const FractionNotationWithSpacesRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
    export const FractionNotationRegex = `(((?<=\\W|^)-\\s*)|(?<![/-])(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
    export const FractionNounRegex = `(?<=\\b)(${AllIntRegex}\\s+(and\\s+)?)?(${AllIntRegex})(\\s+|\\s*-\\s*)(((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\b)`;
    export const FractionNounWithArticleRegex = `(?<=\\b)(((${AllIntRegex}\\s+(and\\s+)?)?(an?|one)(\\s+|\\s*-\\s*)(?!\\bfirst\\b|\\bsecond\\b)((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex})|half|quarter))|(half))(?=\\b)`;
    export const FractionPrepositionRegex = `(?<!${BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>(${AllIntRegex})|((?<![\\.,])\\d+))\\s+(over|in|out\\s+of)\\s+(?<denominator>(${AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)`;
    export const FractionPrepositionWithinPercentModeRegex = `(?<!${BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>(${AllIntRegex})|((?<![\\.,])\\d+))\\s+over\\s+(?<denominator>(${AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)`;
    export const AllPointRegex = `((\\s+${ZeroToNineIntegerRegex})+|(\\s+${SeparaIntRegex}))`;
    export const AllFloatRegex = `${AllIntRegex}(\\s+point)${AllPointRegex}`;
    export const DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s*${BaseNumbers.NumberMultiplierRegex}(?=\\b)`;
    export const DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)`;
    export const DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)`;
    export const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+(?!([\\.,]\\d+))(?=${placeholder})`; }
    export const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\s|^)(?<!(\\d+))[\\.,]\\d+(?!([\\.,]\\d+))(?=${placeholder})`; }
    export const DoubleWithRoundNumber = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
    export const DoubleAllFloatRegex = `((?<=\\b)${AllFloatRegex}(?=\\b))`;
    export const ConnectorRegex = `(?<spacer>و)`;
    export const NumberWithSuffixPercentage = `(?<!%)(${BaseNumbers.NumberReplaceToken})(\\s*)(%(?!${BaseNumbers.NumberReplaceToken})|(بالمئة|مئوية?)\\b)`;
    export const FractionNumberWithSuffixPercentage = `((${BaseNumbers.FractionNumberReplaceToken}))`;
    export const NumberWithPrefixPercentage = `(بالمئة?\\s+من)(\\s*)(${BaseNumbers.NumberReplaceToken})`;
    export const NumberWithPrepositionPercentage = `(${BaseNumbers.NumberReplaceToken})\\s*(من)\\s*(${BaseNumbers.NumberReplaceToken})`;
    export const TillRegex = `(ل|حتى|الى|--|-|—|——|~|–)`;
    export const MoreRegex = `(?:(أكثر|أضخم|أضخم|أعلى|اكبر)(\\s+من)?|فوق|أعلى|يتجاوز|تفوق|(?<!<|=)>)`;
    export const LessRegex = `(?:(أقل|أصغر)(\\s+من)?|أدنى|(?<!>|=)<)`;
    export const EqualRegex = `([ت|ي]ساوي\\s+|مساوي\\s+(ل|لي\\s+)?|(?<!<|>)=)`;
    export const MoreOrEqualPrefix = `((no\\s+${LessRegex})|(على\\s+الأقل))`;
    export const MoreOrEqual = `(?:(${MoreRegex}\\s+(أو)?\\s+${EqualRegex})|(${EqualRegex}\\s+(أو)?\\s+${MoreRegex})|${MoreOrEqualPrefix}(\\s+(أو)?\\s+${EqualRegex})?|(${EqualRegex}\\s+(أو)?\\s+)?${MoreOrEqualPrefix}|>\\s*=)`;
    export const MoreOrEqualSuffix = `((و|أو)\\s+(((أكثر|أضخم|أضخم|أعلى|اكبر)((?!\\s+من)|(\\s+من(?!(\\s*\\d+)))))|((فوق|أعلى)(?!\\s+من))))`;
    export const LessOrEqualPrefix = `((لا\\s+يقل\\s+عن${MoreRegex})|(على\\s+الأكثر)|(حتى\\s+لي))`;
    export const LessOrEqual = `((${LessRegex}\\s+(أو)?\\s+${EqualRegex})|(${EqualRegex}\\s+(أو)?\\s+${LessRegex})|${LessOrEqualPrefix}(\\s+(أو)?\\s+${EqualRegex})?|(${EqualRegex}\\s+(أو)?\\s+)?${LessOrEqualPrefix}|<\\s*=)`;
    export const LessOrEqualSuffix = `((و|أو)\\s+(أقل|أدنى|أصغر)((?!\\s+من)|(\\s+من(?!(\\s*\\d+)))))`;
    export const NumberSplitMark = `(?![,.](?!\\d+))`;
    export const MoreRegexNoNumberSucceed = `((أكثر|أضخم|أعلى|اكبر)((?!\\s+من)|\\s+(من(?!(\\s*\\d+))))|(فوق|أكبر\\s+من)(?!(\\s*\\d+)))`;
    export const LessRegexNoNumberSucceed = `((أقل|أدنى|أصغر)((?!\\s+من)|\\s+(من(?!(\\s*\\d+))))|(تحت)(?!(\\s*\\d+)))`;
    export const EqualRegexNoNumberSucceed = `([ت|ي]ساوي\\s+|مساوي\\s+)?((?!\\s+(من|+(ل|لي\\s*)))|(\\s+(ل|من)(?!(\\s*\\d+)))))`;
    export const OneNumberRangeMoreRegex1 = `(${MoreOrEqual}|${MoreRegex})\\s*(the\\s+)?(?<number1>(${NumberSplitMark}.)+)`;
    export const OneNumberRangeMoreRegex2 = `(?<number1>(${NumberSplitMark}.)+)\\s*${MoreOrEqualSuffix}`;
    export const OneNumberRangeMoreSeparateRegex = `(${EqualRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+أو\\s+)${MoreRegexNoNumberSucceed})|(${MoreRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+أو\\s+)${EqualRegexNoNumberSucceed})`;
    export const OneNumberRangeLessRegex1 = `(${LessOrEqual}|${LessRegex})\\s*(the\\s+)?(?<number2>(${NumberSplitMark}.)+)`;
    export const OneNumberRangeLessRegex2 = `(?<number2>(${NumberSplitMark}.)+)\\s*${LessOrEqualSuffix}`;
    export const OneNumberRangeLessSeparateRegex = `(${EqualRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+أو\\s+)${LessRegexNoNumberSucceed})|(${LessRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+أو\\s+)${EqualRegexNoNumberSucceed})`;
    export const OneNumberRangeEqualRegex = `${EqualRegex}\\s*(the\\s+)?(?<number1>(${NumberSplitMark}.)+)`;
    export const TwoNumberRangeRegex1 = `بين\\s*?(?<number1>(${NumberSplitMark}.)+)\\s*و\\s*?(?<number2>(${NumberSplitMark}.)+)`;
    export const TwoNumberRangeRegex2 = `(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})\\s*(و|لكن|,)\\s*(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})`;
    export const TwoNumberRangeRegex3 = `(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})\\s*(و|لكن|,)\\s*(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})`;
    export const TwoNumberRangeRegex4 = `(من\\s+)?(?<number1>(${NumberSplitMark}(?!\\bمن\\b).)+)\\s*${TillRegex}\\s*?(?<number2>(${NumberSplitMark}.)+)`;
    export const AmbiguousFractionConnectorsRegex = `(\\bin\\b)`;
    export const DecimalSeparatorChar = ',';
    export const FractionMarkerToken = 'على';
    export const NonDecimalSeparatorChar = '.';
    export const HalfADozenText = 'ستة';
    export const WordSeparatorToken = 'و';
    export const WrittenDecimalSeparatorTexts = [ "فاصل" ];
    export const WrittenGroupSeparatorTexts = [ "نقطة" ];
    export const WrittenIntegerSeparatorTexts = [ "و" ];
    export const WrittenFractionSeparatorTexts = [ "و" ];
    export const HalfADozenRegex = `نصف\\s+a\\s+دزينة`;
    export const DigitalNumberRegex = `((?<=\\b)(مائة|ألف|مليون|مليار|مليارد|بليون|تريليون|دزينة(s)?)(?=\\b))|((?<=(\\d|\\b))${BaseNumbers.MultiplierLookupRegex}(?=\\b))`;
    export const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["ال", 1],["صفر", 0],["أحد", 1],["واحد", 1],["اثنان", 2],["ثلاثة", 3],["أربعة", 4],["خمسة", 5],["ستة", 6],["سبعة", 7],["ثمانية", 8],["تسعة", 9],["عشرة", 10],["أحد عشر", 11],["اثنا عشر", 12],["دزينة", 12],["ثلاثة عشر", 13],["أربعة عشر", 14],["خمسة عشر", 15],["ستة عشر", 16],["سبعة عشر", 17],["ثمانية عشر", 18],["تسعة عشر", 19],["عشرون", 20],["ثلاثون", 30],["أربعون", 40],["خمسون", 50],["ستون", 60],["سبعون", 70],["ثمانون", 80],["تسعون", 90],["مئة", 100],["مائة", 100],["ألف", 1000],["مليون", 1000000],["مليار", 1000000000],["مليارد", 1000000000],["بليون", 1000000000],["تريليون", 1000000000000]]);
    export const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["أول", 1],["ثاني", 2],["ثانوي", 2],["نصف", 2],["ثالث", 3],["رابع", 4],["ربع", 4],["خامس", 5],["سادس", 6],["سابع", 7],["ثامن", 8],["تاسع", 9],["عاشر", 10],["حادي عشر", 11],["ثاني عشر", 12],["ثالث عشر", 13],["رابع عشر", 14],["خامس عشر", 15],["سادس عشر", 16],["سابع عشر", 17],["ثامن عشر", 18],["تاسع عشر", 19],["عشرون", 20],["ثلاثون", 30],["أربعون", 40],["خمسون", 50],["ستون", 60],["سبعون", 70],["ثمانون", 80],["تسعون", 90],["مئة", 100]]);
    export const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["مئة", 100],["مائة", 100],["ألف", 1000],["مليون", 1000000],["مليار", 1000000000],["بليار", 1000000000],["بليون", 1000000000],["تريليون", 1000000000000],["عشرات", 10],["مئات", 100],["ألاف", 1000],["ملاين", 1000000],["مليارات", 1000000000],["بليارات", 1000000000],["بلاين", 1000000000],["تريليونهات", 1000000000000],["تريليونات", 1000000000000],["دزينة", 12],["k", 1000],["m", 1000000],["g", 1000000000],["b", 1000000000],["t", 1000000000000]]);
    export const AmbiguityFiltersDict: ReadonlyMap<string, string> = new Map<string, string>([["\\bone\\b", "\\b(ال|هذه|هذا|تلك|أي)\\s+(one)\\b"]]);
    export const RelativeReferenceOffsetMap: ReadonlyMap<string, string> = new Map<string, string>([["", ""]]);
    export const RelativeReferenceRelativeToMap: ReadonlyMap<string, string> = new Map<string, string>([["", ""]]);
}
